Application Environment, Configuration and Security

Using Custom Resources
=======================

What is a Custom Resource?
---------------------------

A custom resource is an extension of the Kubernetes API. It allows you to define your own custom Kubernetes object types and interact with them, just as you would with other Kubernetes objects.

---
CustomResourceDefinitions
--------------------------

A CustomResourceDefinition (CRD) defines a custom resource.

You can create custom controllers that act upon custom resources.

Note: Custom controllers are not part of the CKAD curriculum

To get the resources from a CRD and control plane

$ kuebctl get myresource

---
Hands-On Demo
--------------

Create a CustomResourceDefinition

1. Create the beehives.yml

NOTE: the name must match the plural and group Ex: beehives.acloud.guru

apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  name: beehives.acloud.guru 
spec:
  group: acloud.guru
  names:
    plural: beehives
    singular: beehive
    kind: BeeHive
    shortNames:
    - hive
  scope: Namespaced
  versions:
  - name: v1
    served: true
    storage: true
    schema:
      openAPIV3Schema:
        type: object
        properties:
          spec:
            type: object
            properties:
              supers:
                type: integer
              bess:
                type: integer

kubectl apply -f beehives.yml

2. Get the custom resource def

 kubectl get crd

3. Create a beehive object test-beehive.yml

apiVersion: acloud.guru/v1
kind: BeeHive
metadata:
  name: test-beehive
spec:
  supers: 3
  bees: 60000

kubectl apply -f test-beehive.yml

4. Test all commands

  kubectl get behives

  kubectl get hive

  kubectl get beehive

  kubectl describe beehive test-beehive

---
Exam Tips
----------

Tip 1: Custom resources are extensions of the Kubernetes API.

Tip 2: A CustomResourceDefinition defines a custom resource.

===
Using ServiceAccounts
======================

What Are SeviceAccounts?
-------------------------

A ServiceAccount allows processes within containers to authenticate with the Kubernetes API server. They can be assigned permissions via role-based access control, just like regular user accounts.

---
Service Account Tokens
-----------------------

A token is the credential used to access the API using ServiceAccount.

The token for a Pod's ServiceAccount is automatically mounted to each container.

---
Hands-On Demo
--------------

Create a ServiceAccount

1. Create my-sa.yml

apiVersion: v1
kind: ServiceAccount
metadata:
  name: my-sa
automountServiceAccountToken: true

kubectl apply -f my-sa.yml

2. Test with a Pod sa-pod.yml

apiVersion: v1
kind: Pod
metadata:
  name: sa-pod
spec:
  serviceAccountName: my-sa
  containers:
  - name: busybox
    image: radial/busyboxplus:curl
    command: ['sh', '-c', 'while true; do curl -s --header "Authorization: Bearer $(cat /var/run/secrets/kubernetes.io/serviceaccount/token)" --cacert /var/run/secrets/kubernetes.io/serviceaccount/ca.crt https://kubernetes/api/v1/namespaces/default/pods; sleep 5; done']

kubectl apply -f sa-pod.yml 

3. Get the logs of the pod

 kubectl logs sa-pod

* The pod wont be able to read the pods beacause we haven't set permissions to the sa to read the pods.

* We will give permissions in the next lectures.

---
Exam Tips
----------

Tip 1: ServiceAccounts allow processes within containers to authenticate with the Kubernetes API server.

Tip 2: You can set the Pod's Service Account with serviceAccountName in the Pod spec.

Tip 3: The Pod's ServiceAccount token is automatically mounted to the Pod's containers.

===
Understading Kubernetes Auth
=============================

Authentication and Authorization
---------------------------------

1. The user tries to communicate with the kubernetes API

Authentication: Is the user who they calim to be

Authorization: Does the user have permission to do this?

Authorization

---
Users vs ServiceAccounts
-------------------------

Users
· Not represented by a Kuberentes object.
· Usually authenticates using a client certificate.
· Ususally used by human users, or tools running outside the cluster.

ServiceAccounts
· Represented by a Kubernetes object.
· Usually authenticates using an API token.
· Usually used by automated processes running within containers.

* BOTH: Authorization using role-based access control(RBAC).

---
What is Role-Based Access Control (RBAC)?
------------------------------------------

Role-based access control is a system for managing authorization. It allows you to define what users, or groups of users, are allowed to do within the Kubernetes cluster.

---
Hands-On Demo
--------------

1. Create a Role list-pods-role.yml

apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: list-pods-role
rules:
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["list"]

kubectl apply -f list-pods-role.yml

2. Conenct that role to an service account my-sa with list-pods-rb.yml

apiVersionL rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: list-pods-rb
subjects:
- kind: ServiceAccount
  name: my-sa
  namespace: default
roleRef:
  kind: Role
  name: list-pods-role
  apiGroup: rbac.authorization.k8s.io

kubectl apply -f list-pods-rb.yml

* Using the sa-pod we created the past lecture we try to get the pods

  kubectl logs sa-pod

---
Exam Tips
----------

Tip 1: Normal users usually authenticate using client certificates, while ServiceAccounts usually use tokens.

Tip 2: Auhtorization for both normal users and Service Accounts can be managed using role-based access control (RBAC).

Tip 3: Roles and ClusterRoles define a specific set of permissions.

Tip 4: RoleBindings and ClusterRoleBindings tie Roles or ClusterRoles to users/ServiceAccounts.

===
Exploring Admission Control
============================

What Is an Admission Controller?
---------------------------------

Admission controllers intercept requests to the Kubernetes API after authentication and authorization, but before any objects are persisted. They can be used to validate, dent, or even modify the request.

---
The Admission Control Process
------------------------------

1. The user makes a request to the kubernetes API.
2. The request goes from the API to the Admission Controller 1.
3. It may go through a lot of admission controllers.
4. If it hasn't been denied, it will be stored in the data store.

---
Hands-On Demo
---------------

1. Create a Pod new-namespace-pod.yml

apiVersion: v1
kind: Pod
metadata:
  name: new-namespace-pod
  namespace: new-namespace
spec:
  containers:
  - name: busybox
    image: busybox:stable
    command: ['sh', '-c', 'while true; do echo Running...; sleep 5; done']

kubectl apply -f new-namespace-pod.yml

* The pod wont create because there is no namespace named new-namespace, so we can use an admission control to create a new namespace (This is one of the many applications for the namespace).

2. Modify (with sudo vi) the /etc/kubernetes/manifests/kube-apiserver.yaml

And add to --enable-admission-plugins

--enable-admission-plugins=NodeRestriction,NamespaceAutoProvision

*Get pods or nodes until the kubelet service is up and running again.*

3. Try to create the pod again.

 kubectl apply -f new-namespace-pod.yml

---
Exam Tips
----------

Tip 1: Admission controllers intercept requests to the Kubernetes API and can be used to validate and/or modify them.

Tip 2: You can enable admission controllers using the --enable-admission-plugins flag for kube-apiserver.

===
Managing Compute Resource Usage
================================

Resource Requests vs. Limits
-----------------------------

Requests
 
 · Provides Kubernetes with an idea of how many resources a container is expected to use.

 · The cluster uses this information to select a node that has enough resources available.

Limits

 · Provides an upper limit on how many resources a container is allowed to use.

 · The cluster uses this information to terminate the container process if it attempts to use more than the allowed amount.

---
What is a ResourceQuota?
-------------------------

A ResourceQuota is a Kubernetes object that sets limits on the resources used within a Namespace. If creating or modifying a resource would go beyond this limit, the request will be denied.

---
Hands-On Demo
--------------

Create a Resources Pod

1. Create a namespace resources-test

 kubectl create ns resources-list

2. Create a resources-pod.yml

apiVersion: v1
kind: Pod
metadata:
  name: resources-pod
  namespace: resources-test
spec:
  containers:
  - name: busybox
    image: busybox:stable
    command: ['sh', '-c', 'while true; do echo Running...; sleep 5; done']
    resources:
      requests:
        memory: 64Mi
        cpu: 250m
      limits:
        memory: 128Mi
        cpu: 500m

kubectl apply -f resources-pod.yml

3. Get the pods in the resources-test namespace

  kubectl get pods -n resources-test

Create a ResourceQuota

1. Enable the ResourceQuota admission controller.

  sudo vi /etc/kubernetes/manifests/kube-apiserver.yaml
  
  --enable-admission-plugins=...,ResourceQuota

* Get pods or nodes until kubelet is available

5. Create a ResourceQuota resources-test-quota.yml

apiVersion: v1
kind: ResourceQuota
metadata:
  name: resources-test-quota
  namespace: resources-test
spec:
  hard:
    requests.memory: 128Mi
    requests.cpu: 500m
    limits.memory: 256Mi
    limits.cpu: "1"

kubectl apply -f resources-test-quota.yml

Create a Pod with too-many-resources.yml

apiVersion: v1
kind: Pod
metadata:
  name: too-many-resources-pod
  namespace: resources-test
spec:
  containers:
  - name: busybox
    image: busybox:stable
    command: ['sh', '-c', 'while true; do echo Running...; sleep 5; done']
    resources:
      requests:
        memory: 64Mi
        cpu: 250m
      limits:
        memory: 200Mi
        cpu: 500m

kubectl apply -f too-many-resources-pod.yml

* The resource quota aggregates all the resources taken from different pods in the namespace.

* The Pod will fail to create because we exceeded quota.

---
Exam Tips
----------

Tip 1: A resource request informs the cluster of the expected resource usage for a container. It is used to select a Node that has enough resources available to run the Pod.

Tip 2: A resource limit sets an upper limit on how many resources container can use. If the container process attempts to go above this limit, the container process will be terminated.

Tip 3: A ResourceQuota limits the amount of resources that can be used within a specific Namespace. If a user attempts to create or modify objects in that Namespace such that the quota would be exceeded, the request will be denied.

===
Configuring Applications with ConfigMaps and Secrets
=====================================================

What is a ConfigMap?
---------------------

A ConfigMap is an object that stores configuration data for applications in the form of key-value pairs. This data can be passed to containers at runtime.

---
What is a Secret?
------------------

A Secret is similar to a ConfigMap. It stores data that can be passed to containers, but it is designed to store sensitive data such as passwords or API tokens.

---
Volume Mounts vs. Environment Variables
----------------------------------------

2 ways to pass ConfigMap and Secret data to containers...

Volume Mounts

· Data appears in the container's file system at runtime.
· Each top-level key in the config data becomes a file name.

Environment Variables

· Data appears as environment variables visible to the container at runtime.
· You can specify specific keys and variable names for each piece of data.

---
Hands-On Demo
--------------

Create a ConfigMap

1. Create the my-configmap.yml

apiVersion: v1
kind: ConfigMap
metadata:
  name: my-configmap
data:
  message: Hello, World!
  app.cfg: |
    # A configuration file!
    key1=value1
    key2=value2

kubectl apply -f my-configmap.yml

2. Use that configmap in cm-pod.yml

apiVersion: v1
kind: Pod
metadata:
  name: cm-pod
spec:
  restartPolicy: Never
  containers:
  - name: busybox
    image: busybox:stable
    command: ['sh', '-c', 'echo $MESSAGE; cat /config/app.cfg']
    env:
    - name: MESSAGE
      valueFrom:
        configMapKeyRef:
          name: my-configmap
          key: message
    volumeMounts:
    - name: config
      mountPath: /config
      readOnly: true
  volumes:
  - name: config
    configMap:
      name: my-configmap
      items:
      - key: app.cfg
        path: app.cfg

kubectl apply -f cm-pod.yml

3. Get the logs of the cm-pod

 kubectl logs cm-pod


Create a Secret

1. Encode the secret data.

  echo Secret Stuff! | base64

  echo Secret stuff in a file! | base64

2. Create the secret my-secret.yml

apiVersion: v1
kind: Secret
metadata:
  name: my-secret
type: Opaque
data:
  sensitive.data: <secret 1>
  passwords.txt: <secret 2>

kubectl apply -f my-secret

3. Use the secrets in a Pod secret-pod.yml

apiVersion: v1
kind: Pod
metadata:
  name: secret-pod
spec:
  restartPolicy: Never
  containers:
  - name: busybox
    image: busybox:stable
    command: ['sh', '-c', 'echo $SENSITIVE_STUFF; cat /config/passwords.txt']
    env:
    - name: SENSITIVE_STUFF
      valueFrom:
        secretKeyRef:
          name: my-secret
          key: sensitive.data
    volumeMounts:
    - name: secret-config
      mountPath: /config
      readOnly: true
  volumes:
  - name: secret-config
    secret:
      secretName: my-secret
      items:
      - key: passwords.txt
        path: passwords.txt

kubectl apply -f secret-pod.yml

4. Check the logs

  kubectl logs secret-pod

---
Exam-Tips
----------

Tip 1: A ConfigMao stores configuration data that can be passed to containers.

Tip 2: A Secret is designed to store sensitive configuration data such as passwords or API Keys.

Tip 3: Data from both ConfigMaps and Secrets can be passed to containers using either a volume mount or environment variables.

===
Configuring SecurityContext for Containers
===========================================